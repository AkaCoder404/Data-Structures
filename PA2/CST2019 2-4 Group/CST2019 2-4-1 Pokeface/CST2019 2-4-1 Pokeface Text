题目描述
　　魔术师将一叠扑克顺次在桌上排成一行，全部正面朝上。之后的每一次挥一挥衣袖，都会反转一连串的扑克，改变其正反朝向。从古代传下来的规矩，魔术师皆有师傅，在进行了n次的反转操作之后，他们要回答师傅的m个问题。问题形如：第i张扑克牌在哪几次反转操作中曾经被反转过？

输入
　　第一行包含两个正整数n、m，其中n表示魔术师反转扑克牌的操作次数，m表示师傅问题的个数
　　接下来的n行，每行有两个整数i、j，表示魔术师每次反转的起始和终止位置（操作包括边界）
　　再接下来的m行，每行包含一个整数k，表示师傅所询问的扑克牌编号
输出
　　对于师傅的每个问题，输出一行。如果魔术师曾经反转过这张牌，则输出r个整数，代表魔术师的反转操作序列中包含这张牌的编号（操作编号从1开始计数）；若不曾反转过这张牌，输出-1

输入样例
  4 4
  2 5
  1 3
  4 6
  2 7
  1
  3
  6
  9
输出样例
  2
  1 2 4
  3 4
  -1
  
限制
　　1 ≤ n ≤ 10^5
　　1 ≤ m ≤ 10^5
　　1 ≤ i, j, k < 2^31
　　测例保证所有问题的输出序列长度之和小于10^6
　　时间限制：1.0 sec
　　内存限制：256 MB
提示
　　● Segment Tree（讲义09.BSTA.XC.Segment Tree）
　　●参考讲义中"Merge At Common Ancestors"一节，Segment Tree中每个内部节点保存所有 merge 到该节点的巡逻记录
