描述
　　> 一种新的比较器硬件被发明了出来，它可以每次比较三个数，并返回最小数和最大数。
　　> 为了测试这个比较器，你需要实现一个排序算法，使用该比较器，来将 n 个互不相同的整数从小到大排序。
　　> 具体来说，我们提供了一个交互库，其中实现了一个比较器函数，你需要编写一个排序函数，调用比较器函数将我们传给你的序列排好序即可。
　　> 由于测试时间紧迫，比较器不能无限次使用，你需要在比较器使用次数限制之内，将这些整数正确地排序。

接口说明
　　> 我们提供的交互库包括一个头文件 sort.h 和一个库文件 sort_lib.cpp。头文件包含了排序函数和比较器函数的声明，库文件包含了比较器函数和主函数的实现。编译时，我们会将库文件和你的程序一起编译和链接，因此你只需在你的程序中包含头文件 sort.h，并实现排序函数。
　　> 以下是各函数的声明：
-------------------------------------------
void sort(int n, int limit, int *a);
-------------------------------------------
　　这是排序函数的声明。你需要在你的代码中实现该函数。其中 n 表示待排序的整数个数，limit 表示比较器函数的使用次数限制。a 为一个长度为 n 的整数数组，初始值为 0 ~ n-1。你需要将排序的结果存入 a 数组中。
-------------------------------------------
void compare(int a, int b, int c, int *max, int *min);
-------------------------------------------
　　> 这是比较器函数的声明。我们的交互库中已经实现了该函数，你需要在排序时调用它。传入的 a, b, c 表示待比较的三个数，比较完成后，最大的数会被存入 max 指针所指的地址中，最小的数会被存入 min 指针所指的地址中。
　　> 为了防止作弊，你无法得到待排序的整数的值，而只能得到每个整数的编号。因此 a 数组中的值，以及传给比较器函数的 a, b, c，都应该是 0 ~ n-1 之间的数，表示某个整数的编号。

测试说明
　　> 我们的交互库的具体实现如下：
　　> 首先从标准输入中读取两个整数 n, limit，分别表示待排序的整数个数和比较器函数的使用次数限制。
　　> 然后以某种方式读入并生成待排序的 n 个整数，这一步对于我们提供的交互库和OJ上评测时使用的交互库可能不同（但这不影响你做题）。
　　> 接着调用 sort 函数。
　　> 在你实现的 sort 函数中，可以调用 compare 函数来进行比较，如果传入的 a, b, c 不在 0 ~ n-1 的范围内，或 compare 函数调用次数超过 limit，你的程序会被判为“Wrong Answer”。
　　> 在 sort 函数返回后，我们会检查 a 数组的内容，是否已经正确地排好序，如果不是，你的程序会被判为“Wrong Answer”，否则你的程序被判为“Accepted”，即通过该测试点。


　　> 如果你需要在本地测试你的程序，你可以使用 g++ sort_lib.cpp your_code.cpp -O2 -o sort.exe 编译你的程序，再运行 sort.exe 来测试。
　　> 你需要严格按照输入格式向交互库输入数据，否则不能保证交互库正常运行。
　　> 在交互库运行结束后，会输出排序正确与否等信息，到标准输出和标准错误输出，你可以参考 sort_lib.cpp 来了解更多。注意，当你的程序异常退出时（如栈溢出），你可能无法得到这些信息的输出。
　　> 我们还提供了一个样例程序 sort_sample.cpp，实现了 Bogo 排序算法。你可以参考这个程序来理解交互库和解题，或者不参考，这将与你的得分无关。
　　> 请注意，你只需提交实现了 sort 函数的源文件，不要提交交互库“sort.h”“sort_lib.cpp”等其他文件，否则可能会导致编译错误。
　　>下载交互库和样例程序

输入
　　对于我们提供的交互库，输入格式如下：
　　第一行两个整数 n, limit，具体含义见“测试说明”。
　　第二行 n 个整数，要求是一个 0 ~ n-1 的排列，表示待排序的序列。

输出
　　对于我们提供的交互库，当你的程序能够在比较次数限制之内正确地进行排序时，输出“Accepted”，否则会输出一些错误信息，具体见交互库源程序 sort_lib.cpp。

输入样例
------------------------------
5 1000
3 2 4 0 1
------------------------------
　　这是对于我们提供的交互库的一组输入样例，可用于本地调试。在 OJ 上评测时，由于交互库实现不同，输入格式不一定是这样。

　　请不要尝试在你的程序中读取标准输入或其他文件。

输出样例
------------------------------
Accepted
------------------------------
标准错误输出(stderr)中的输出：
------------------------------
cmp_cnt = 135
------------------------------
　　这是使用 sort_sample.cpp 和我们提供的交互库输入样例的运行结果，表示该排序算法能通过这组数据，调用了比较函数 135 次。

　　> 请不要尝试在你的程序中向标准输出或其他文件中输出信息。

数据范围
　　> 共有20个测试点，每个测试点的数据范围如下：

测试点编号 	n 	limit
1 	10 	1000
2 	100 	10000
3 	1000 	300000
4 	10000 	200000
5 	10000 	100000
6 	10000 	90000
7 	10000 	80000
8 	10000 	74000
9 	10000 	72000
10 	1000000 	13000000
11 	100000 	3500000
12 	100000 	2000000
13 	100000 	1000000
14 	100000 	930000
15 	100000 	900000
16 	100000 	870000
17 	1000000 	11700000
18 	1000000 	11000000
19 	10000 	70000
20 	1000000 	10300000

资源限制
　　> 时间限制：1 sec
　　> 内存限制：256 MB
提示
　　● [有哪些常用的排序算法？这些算法的期望、最好、最坏比较次数分别是多少？]
　　● [给 n 个数排序的比较次数的理论下界是多少？如果一次能比较三个数，又是多少？]
　　● [哪些排序算法可以改进成一次比较三个数的？改进效果分别如何？]
　　● [提示：对已有的排序算法作更多的改进，以进一步减少比较次数]
